import os
from flask import Flask, render_template, request, jsonify
import google.generativeai as genai

# Create the Flask application
app = Flask(__name__)

# --- FIX 1: Configure Gemini API in a cleaner, safer way ---
# This part is moved to the top level for clarity.
try:
    GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
    else:
        # This print will appear in the Replit console if the key is missing.
        print("FIGYELEM: A GEMINI_API_KEY nincs beállítva a Replit Secrets-ben.")
except Exception as e:
    print(f"Hiba a Gemini API konfigurációja során: {str(e)}")

def get_story_from_ai(user_prompt):
    """
    Generates a children's story using the Google Gemini API based on the user's prompt.
    """
    # Check if the API key was configured successfully
    if not genai.API_KEY:
        return "Hiányzik a Gemini API kulcs. Kérjük, ellenőrizze a konfigurációt."

    try:
        # --- FIX 2: Use a valid and fast Gemini model ---
        model = genai.GenerativeModel('gemini-1.5-flash-latest')

        # --- FIX 3: Correctly define the system prompt as a single, valid string ---
        system_prompt = """Egy kedves mesélő vagy, aki járatos a gyermekpszichológiában, különösképp a meseterápiában. Most egy szülőnek segítesz mesét írni, amit felolvashat gyermekeinek.

## Feladatod

Az a feladatod, hogy a felhasználói prompt kívánságainak a figyelembevételével esti mesét írj a gyermekeidnek. A szereplőknek mindig adj valami játékos nevet. A mese tekintetében, vedd figyelembe a meseterápiás elveket:

### 1. Hagyományos mesestruktúra
A mese kövesse a klasszikus mesék jól ismert szerkezetét. Ez általában a következőket jelenti:
1.  **Kezdet:** Nyugalmi állapot bemutatása, a főszereplő és a helyzet megismerése.
2.  **Konfliktus vagy Hiány:** Megjelenik egy probléma, egy kihívás, vagy valami hiányzik.
3.  **Út vagy Vándorlás:** A főszereplő útnak indul a probléma megoldására.
4.  **Próbák és Megmérettetések:** A főszereplőnek különböző feladatokat kell megoldania.
5.  **Tetőpont:** A legnagyobb próba, a konfliktus csúcspontja.
6.  **Megoldás és Hazatérés:** A konfliktus megoldódik, a főszereplő eléri célját és hazatér.
7.  **Végkifejlet:** Az új, rendezett állapot bemutatása.

### 2. Egyértelmű Szereplők (Archetípusok)
A mesében megjelenő szereplők legyenek tipikusak, archetipikusak (hős, gonosz, segítő állat).

### 3. Szimbolikus Nyelv
A mese legyen gazdag szimbólumokban (erdő, víz, hegy).

### 4. Nincs Explicit Tanulság
A tanulság a történet átélésén keresztül jön létre.

### 5. Metaforikus Jelleg
A nehézségek, kihívások legyenek metaforikusak.

### 6. Reményteli Végkifejlet
A végkifejletnek a megküzdés és a helyreállás reményét kell hordoznia.

### 7. Egyszerű, Ritmusos Nyelv
A mese nyelvezete legyen tiszta, világos.

### 8. Belső Utazás Lehetősége
A mese adja meg a lehetőséget a hallgatónak, hogy belső utazást tegyen.

---

### Beszélgetés a mese után

A mese végeztével röviden adj tanácsot a felolvasó szülőnek hogy miről hogyan beszélgessen a gyerekekkel. Milyen kérdést tegyen fel az adott mesével kapcsolatban, amely segíthet a mese feldolgozásában terápiás jelleggel."""

        # Combine the system prompt with the user prompt
        full_prompt = f"{system_prompt}\n\nA felhasználó által megadott mese-kérés a következő:\n---\n{user_prompt}\n---"

        # Generate content with the Gemini model
        response = model.generate_content(full_prompt)

        # Check if the response was blocked by safety filters
        if response.prompt_feedback.block_reason:
            print(f"Prompt was blocked: {response.prompt_feedback.block_reason.name}")
            return "A kérést a biztonsági szűrő blokkolta. Próbáljon meg más szöveget megadni."

        # Return the generated story text
        return response.text.strip()

    except Exception as e:
        # This will print the detailed error to your Replit console for debugging
        print(f"Hiba a történet generálása során: {str(e)}")
        # This will be sent back to the user
        return f"Sajnos nem sikerült mesét alkotni ebben a pillanatban. Kérjük, próbálja újra később."

# Route for the main page
@app.route('/')
def index():
    """Serve the main page of the application"""
    return render_template('index.html')

# Route for generating stories
@app.route('/generate_tale', methods=['POST'])
def generate_tale():
    """Process the user's story prompt and generate a story using the Gemini API"""
    try:
        data = request.get_json()

        if 'prompt_text' not in data or not data['prompt_text'].strip():
            return jsonify({'error': 'Kérjük, adjon meg egy promptot a történethez'}), 400

        prompt_text = data['prompt_text']
        story = get_story_from_ai(prompt_text)

        # --- FIX 4: Simplified error checking ---
        # The function now returns user-friendly error messages directly.
        # We can check if the response starts with a known error prefix.
        if story.startswith("Hiányzik") or story.startswith("Sajnos") or story.startswith("A kérést"):
            return jsonify({'error': story}), 500
        else:
            return jsonify({'story': story})

    except Exception as e:
        print(f"Hiba a /generate_tale útvonalon: {str(e)}")
        return jsonify({'error': f'Hiba történt a szerveren: {str(e)}'}), 500

# Run the Flask application
if __name__ == '__main__':
    # Use port 8080 as a common Replit default, and turn debug off for stability
    app.run(host='0.0.0.0', port=8080)